{
    "collab_server" : "",
    "contents" : "shinyServer(function(input, output) {\n  \n  output$uiOptions <- renderUI({\n    list_res <- list()\n    i <- 1\n    \n    # chart title\n    list_res[[i]] <- textInput(\"title\", \"Title\", value = \"My chart title\")\n    i <- i + 1\n    \n    if(input$sidebar == \"column\") {\n      if(input$col_type == 1) {\n        if(is.null(input$input_data)) {\n          data(data_bar)\n        } else {\n          data_bar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n      } else if(input$col_type %in% c(2, 3, 4)) {\n        if(is.null(input$input_data)) {\n          data(data_gbar)\n          data_bar <- data_gbar\n        } else {\n          data_bar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n      } else {\n        if(is.null(input$input_data)) {\n          data(data_fbar)\n          data_bar <- data_fbar\n        } else {\n          data_bar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n      }\n      \n      # numeric columns\n      col_num <- colnames(data_bar)[which(sapply(colnames(data_bar), FUN = function(j) {\n        is.numeric(data_bar[,j])\n      }))]\n      \n      # categorical or character column\n      col_char <- colnames(data_bar)[which(sapply(colnames(data_bar), FUN = function(j) {\n        is.character(data_bar[,j]) | is.factor(data_bar[,j])\n      }))]\n      \n      # x column\n      list_res[[i]] <- radioButtons(\"col1_xcol\", \"X-axis value\", choices = col_char)\n      i <- i + 1\n      \n      if(input$col_type == 1) {\n        # y column\n        list_res[[i]] <- radioButtons(\"col1_ycol\", \"Y-axis value\", choices = col_num)\n        i <- i + 1\n      } else if(input$col_type %in% c(2, 3, 4)){\n        # y column\n        list_res[[i]] <- checkboxGroupInput(\"col2_ycol\", \"Y-axis value\", choices = col_num, selected = col_num)\n        i <- i + 1\n      } else {\n        list_res[[i]] <- radioButtons(\"col5_ycol1\", \"Y-axis inf. value\", choices = col_num)\n        i <- i + 1\n        list_res[[i]] <- radioButtons(\"col5_ycol2\", \"Y-axis sup. value\", choices = col_num)\n        i <- i + 1\n      }\n      \n      #xlab \n      list_res[[i]] <- textInput(\"col1_xlab\", \"X-axis label\", value = \"X-axis label\") \n      i <- i + 1\n      \n      #ylab\n      list_res[[i]] <- textInput(\"col1_ylab\", \"Y-axis label\", value = \"Y-axis label\")\n      i <- i + 1\n      \n      # colors\n      # if(\"\")\n      \n      # horizontal?\n      list_res[[i]] <- checkboxInput(\"col1_horiz\", \"Horizontal chart\")\n      i <- i + 1\n      \n      # show values ?\n      list_res[[i]] <- checkboxInput(\"col1_showval\", \"Show values\")\n      i <- i + 1\n      \n      # 3D ?\n      list_res[[i]] <- checkboxInput(\"col1_3d\", \"3D\")\n      i <- i + 1\n      \n      # legend ?\n      list_res[[i]] <- checkboxInput(\"legend1\", \"Legend\")\n      i <- i + 1\n      \n      # if(input$legend1) {\n      list_res[[i]] <- conditionalPanel(\n        condition = \"input.legend1\", \n        radioButtons(\"legend_side1\", \"Legend side\", choices = c(\"left\", \"right\", \"top\", \"bottom\")))\n      i <- i + 1\n      # }\n    } else if(input$sidebar == \"line\") {\n      \n      if(is.null(input$input_data)) {\n        data(\"iris\")\n        data_lig <- iris\n      } else {\n        data_lig <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n      \n      #colonnes numeriques\n      col_num <- colnames(data_lig)[which(sapply(colnames(data_lig), FUN = function(j) {\n        is.numeric(data_lig[,j])\n      }))]\n      \n      # colonne x\n      list_res[[i]] <- radioButtons(\"lig_xcol\", \"X-axis value\", choices = col_num)\n      i <- i + 1\n      \n      # colonne y\n      list_res[[i]] <- checkboxGroupInput(\"lig_ycol\", \"Y-axis value\", choices = col_num)\n      i <- i + 1\n      \n      #xlab \n      list_res[[i]] <- textInput(\"lig_xlab\", \"X-axis label\", value = \"X-axis label\") \n      i <- i + 1\n      \n      #ylab\n      list_res[[i]] <- textInput(\"lig_ylab\", \"Y-axis label\", value = \"Y-axis label\")\n      i <- i + 1\n      \n      \n      # legend ?\n      list_res[[i]] <- checkboxInput(\"legend2\", \"Legend\")\n      i <- i + 1\n      \n      list_res[[i]] <- conditionalPanel(\n        condition = \"input.legend2\", \n        radioButtons(\"legend_side2\", \"Legend side\", choices = c(\"left\", \"right\", \"top\", \"bottom\")))\n      i <- i + 1\n      \n    } else if(input$sidebar == \"piedon\") {\n      if(is.null(input$input_data)) {\n        data(\"data_pie\")\n      } else {\n        data_pie <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n      \n      #colonnes numeriques\n      col_num <- colnames(data_pie)[which(sapply(colnames(data_pie), FUN = function(j) {\n        is.numeric(data_pie[,j])\n      }))]\n      \n      #colonnes char\n      col_char <- colnames(data_pie)[which(sapply(colnames(data_pie), FUN = function(j) {\n        is.character(data_pie[,j])\n      }))]\n      \n      list_res[[i]] <- radioButtons(\"pie_lab\", \"Labels column\", choices = col_char)\n      i <- i + 1\n      \n      list_res[[i]] <- radioButtons(\"pie_val\", \"Values column\", choices = col_num)\n      i <- i + 1\n      \n      # show values ?\n      list_res[[i]] <- checkboxInput(\"pie_showval\", \"Show values\")\n      i <- i + 1\n      \n      # 3D ?\n      list_res[[i]] <- sliderInput(\"pie_depth\", \"Pie depth\", min = 0, max = 100, value = 0)\n      i <- i + 1\n      \n      if(input$piedon_type == 2) {\n        list_res[[i]] <- sliderInput(\"pie_radius\", \"Inner Radius\", min = 0, max = 100, value = 0)\n        i <- i + 1\n      }\n      \n      # legend ?\n      list_res[[i]] <- checkboxInput(\"legend3\", \"Legend\")\n      i <- i + 1\n      \n      list_res[[i]] <- conditionalPanel(\n        condition = \"input.legend3\", \n        radioButtons(\"legend_side3\", \"Legend side\", choices = c(\"left\", \"right\", \"top\", \"bottom\")))\n      i <- i + 1\n    }\n    \n    return(list_res)\n  })\n  \n  \n  output$amchart <- renderAmCharts({\n    if(input$sidebar == \"column\") {\n      if(input$col_type == 1) {\n        if(is.null(input$input_data)) {\n          data(data_bar)\n        } else {\n          data_bar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n        res <- amBarplot(x = input$col1_xcol, y = input$col1_ycol, data = data_bar, xlab = input$col1_xlab,\n                         ylab = input$col1_ylab, horiz = input$col1_horiz, show_values = input$col1_showval,\n                         depth = ifelse(input$col1_3d, 20, 0), main = input$title)\n      } else if(input$col_type %in% c(2, 3, 4)) {\n        if(is.null(input$input_data)) {\n          data(data_gbar)\n        } else {\n          data_gbar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n        \n        if (input$col_type == 2) {\n          res <- amBarplot(x = input$col1_xcol, y = input$col2_ycol, data = data_gbar, xlab = input$col1_xlab,\n                           ylab = input$col1_ylab, horiz = input$col1_horiz, show_values = input$col1_showval,\n                           depth = ifelse(input$col1_3d, 20, 0), main = input$title, legend = input$legend1,\n                           legendPosition = ifelse(!is.null(input$legend_side1), input$legend_side1, \"right\")\n          )\n        } else if (input$col_type == 3) {\n          res <- amBarplot(x = input$col1_xcol, y = input$col2_ycol, data = data_gbar, xlab = input$col1_xlab,\n                           ylab = input$col1_ylab, horiz = input$col1_horiz, show_values = input$col1_showval,\n                           depth = ifelse(input$col1_3d, 20, 0), main = input$title, stack_type = \"regular\", \n                           legend = input$legend1, \n                           legendPosition = ifelse(!is.null(input$legend_side1), input$legend_side1, \"right\")\n          )\n        } else if (input$col_type == 4) {\n          res <- amBarplot(x = input$col1_xcol, y = input$col2_ycol, data = data_gbar, xlab = input$col1_xlab,\n                           ylab = input$col1_ylab, horiz = input$col1_horiz, show_values = input$col1_showval,\n                           depth = ifelse(input$col1_3d, 20, 0), main = input$title, stack_type = \"100\", \n                           legend = input$legend1, \n                           legendPosition = ifelse(!is.null(input$legend_side1), input$legend_side1, \"right\")\n          )\n        }\n      } else if (input$col_type == 5) {\n        if(is.null(input$input_data)) {\n          data(\"data_fbar\")\n        } else {\n          data_fbar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n        res <- amFloatingBar(x = input$col1_xcol, y_inf = input$col5_ycol1, y_sup = input$col5_ycol2, data = data_fbar, \n                             xlab = input$col1_xlab, ylab = input$col1_ylab, horiz = input$col1_horiz, \n                             show_values = input$col1_showval, depth = ifelse(input$col1_3d, 20, 0), main = input$title, \n                             legendPosition = ifelse(!is.null(input$legend_side1), input$legend_side1, \"right\")\n        )\n      }\n    } else if (input$sidebar == \"line\") {\n      if(is.null(input$input_data)) {\n        data(\"iris\")\n        data_lig <- iris\n      } else {\n        data_lig <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n      \n      if(input$line_type == 1) {\n        type_l <- \"l\"\n      } else if(input$line_type == 2) {\n        type_l <- \"sl\"\n      } else if(input$line_type == 3) {\n        type_l <- \"st\"\n      } else if(input$line_type == 4) {\n        type_l <- \"b\"\n      }\n      \n      \n      if(is.null(input$lig_ycol)) {\n        yval <- NULL\n      } else {\n        yval <- data_lig[,input$lig_ycol]\n      }\n      \n      if(!is.null(yval)) {\n        data_lig <- data_lig[order(data_lig[,input$lig_xcol]),]\n        if(length(input$lig_ycol) == 1) {\n          res <- amPlot(x = data_lig[,input$lig_xcol], y = data_lig[,input$lig_ycol], xlab = input$lig_xlab,\n                        ylab = input$lig_ylab, type = type_l, main = input$title, legend = input$legend2,\n                        legendPosition = ifelse(!is.null(input$legend_side2), input$legend_side2, \"right\"))\n        } else if(length(input$lig_ycol) > 1) {\n          ycol1 <- input$lig_ycol[1]\n          res <- amPlot(x = data_lig[,input$lig_xcol], y = data_lig[,ycol1], xlab = input$lig_xlab,\n                        ylab = input$lig_ylab, type = type_l, main = input$title, legend = input$legend2,\n                        legendPosition = ifelse(!is.null(input$legend_side2), input$legend_side2, \"right\"))\n          sapply(2:length(input$lig_ycol), FUN = function(j) {\n            ycoli <- input$lig_ycol[j]\n            res <<- amLines(res, y = data_lig[,ycoli])\n          })\n        }\n        \n      } else {\n        res <- amPlot(x = data_lig[,input$lig_xcol], xlab = input$lig_xlab,\n                      ylab = input$lig_ylab, type = type_l, main = input$title, legend = input$legend2,\n                      legendPosition = ifelse(!is.null(input$legend_side2), input$legend_side2, \"right\")\n                      )\n      }\n    \n    } else if(input$sidebar == \"piedon\") {\n      \n      if(is.null(input$input_data)) {\n        data(\"data_pie\")\n      } else {\n        data_pie <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n      \n      colnames(data_pie)[which(colnames(data_pie) == input$pie_lab)] <- \"label\"\n      colnames(data_pie)[which(colnames(data_pie) == input$pie_val)] <- \"value\"\n      \n      if(input$piedon_type == 1) {\n        res <- amPie(data = data_pie, show_values = input$pie_showval, depth = input$pie_depth, main = input$title,\n                     legend = input$legend3, \n                     legendPosition = ifelse(!is.null(input$legend_side3), input$legend_side3, \"right\"))\n      } else {\n        res <- amPie(data = data_pie, show_values = input$pie_showval, depth = input$pie_depth,\n                     inner_radius = input$pie_radius, main = input$title, legend = input$legend3,  \n                     legendPosition = ifelse(!is.null(input$legend_side3), input$legend_side3, \"right\"))\n      }\n    }\n    \n    \n    res\n  })\n  \n  output$table_chart <- renderDataTable({\n    if(input$sidebar == \"column\") {\n      if(input$col_type == 1) {\n        if(is.null(input$input_data)) {\n          data(data_bar)\n        } else {\n          data_bar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n        res <- datatable(data_bar, rownames = FALSE)\n      } else if(input$col_type %in% c(2, 3, 4)){\n        if(is.null(input$input_data)) {\n          data(gdata_bar)\n        } else {\n          data_gbar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n        res <- datatable(data_gbar, rownames = FALSE)\n      } else if(input$col_type == 5) {\n        if(is.null(input$input_data)) {\n          data(data_fbar)\n        } else {\n          data_fbar <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n        }\n        res <- datatable(data_fbar, rownames = FALSE)\n      }\n    } else if(input$sidebar == \"line\") {\n      if(is.null(input$input_data)) {\n        data(iris)\n        res <- iris\n      } else {\n        res <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n    } else if(input$sidebar == \"piedon\") {\n      if(is.null(input$input_data)) {\n        data(\"data_pie\")\n        res <- data_pie\n      } else {\n        res <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n    }\n    res\n  })\n  \n  output$code_chart <- renderText({\n    if(input$sidebar == \"column\") {\n      if(input$col_type == 1) {\n        res_text <- paste0('amBarplot(x = \"', input$col1_xcol, '\", y = \"', input$col1_ycol, '\", data = data_bar, xlab = \"',\n                           input$col1_xlab, '\", ylab = \"', input$col1_ylab, '\", horiz = ', input$col1_horiz, \n                           ', show_values = ', input$col1_showval, ', depth = ', ifelse(input$col1_3d, 20, 0), \n                           ', main = \"', input$title, '\")')\n      } else if(input$col_type == 2) {\n        res_text <- paste0('amBarplot(x = \"', input$col1_xcol, '\", y = \"', input$col1_ycol, '\", data = data_bar, xlab = \"',\n                           input$col1_xlab, '\", ylab = \"', input$col1_ylab, '\", horiz = ', input$col1_horiz, \n                           ', show_values = ', input$col1_showval, ', depth = ', ifelse(input$col1_3d, 20, 0), \n                           ', main = \"', input$title, '\", legend = ', input$legend1, ')')\n      } else if(input$col_type == 3) {\n        res_text <- paste0('amBarplot(x = \"', input$col1_xcol, '\", y = \"', input$col1_ycol, '\", data = data_bar, xlab = \"',\n                           input$col1_xlab, '\", ylab = \"', input$col1_ylab, '\", horiz = ', input$col1_horiz, \n                           ', show_values = ', input$col1_showval, ', depth = ', ifelse(input$col1_3d, 20, 0), \n                           ', main = \"', input$title, '\", stacktype = \"regular\", legend = ', input$legend1, ')')\n      } else if(input$col_type == 4) {\n        res_text <- paste0('amBarplot(x = \"', input$col1_xcol, '\", y = \"', input$col1_ycol, '\", data = data_bar, xlab = \"',\n                           input$col1_xlab, '\", ylab = \"', input$col1_ylab, '\", horiz = ', input$col1_horiz, \n                           ', show_values = ', input$col1_showval, ', depth = ', ifelse(input$col1_3d, 20, 0), \n                           ', main = \"', input$title, '\", stacktype = \"100\", legend = ', input$legend1, ')')\n      } else if(input$col_type == 5) {\n        res_text <- paste0('amFloatingBar(x = \"', input$col1_xcol, '\", y_inf = \"', input$col5_ycol1, \", y_sup = \",\n                           input$col5_ycol2, '\", data = data_bar, xlab = \"',\n                           input$col1_xlab, '\", ylab = \"', input$col1_ylab, '\", horiz = ', input$col1_horiz, \n                           ', show_values = ', input$col1_showval, ', depth = ', ifelse(input$col1_3d, 20, 0), \n                           ', main = \"', input$title, '\", stacktype = \"100\", legend = ', input$legend1, ')')\n      }\n    } else if (input$sidebar == \"line\") {\n      if(is.null(input$input_data)) {\n        data(\"iris\")\n        data_lig <- iris\n      } else {\n        data_lig <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n      \n      if(input$line_type == 1) {\n        type_l <- \"l\"\n      } else if(input$line_type == 2) {\n        type_l <- \"sl\"\n      } else if(input$line_type == 3) {\n        type_l <- \"st\"\n      } else if(input$line_type == 4) {\n        type_l <- \"b\"\n      }\n      \n      \n      if(is.null(input$lig_ycol)) {\n        yval <- NULL\n      } else {\n        yval <- data_lig[,input$lig_ycol]\n      }\n      \n      if(!is.null(yval)) {\n        data_lig <- data_lig[order(data_lig[,input$lig_xcol]),]\n        if(length(input$lig_ycol) == 1) {\n          res_text <- paste0('amPlot(x = datalig$', input$lig_xcol,', y = data_lig$', input$lig_ycol, ', xlab = \"', \n                             input$lig_xlab, '\", ylab = \"', input$lig_ylab, '\", type = \"', type_l, '\", main = \"', input$title, \n                             '\", legend = ', input$legend2, ', legendPosition = \"', \n                             ifelse(!is.null(input$legend_side2), input$legend_side2, 'right'), '\")')\n        } else if(length(input$lig_ycol) > 1) {\n          ycol1 <- input$lig_ycol[1]\n          res_text <- paste0('amPlot(x = data_lig$', input$lig_xcol, ', y = data_lig$', ycol1, ', xlab = \"', input$lig_xlab,\n                        '\", ylab = \"', input$lig_ylab, '\", type = \"', type_l, '\", main = \"', input$title, \n                        '\", legend = ', input$legend2, ', legendPosition = \"', \n                        ifelse(!is.null(input$legend_side2), input$legend_side2, 'right'), '\") ')\n          sapply(2:length(input$lig_ycol), FUN = function(j) {\n            ycoli <- input$lig_ycol[j]\n            res_text <<- paste0(res_text, \n                                '%>>% amLines(y = data_lig$', ycoli, ') ')\n          })\n        }\n        \n      } else {\n        res_text <- paste0('amPlot(x = data_lig$', input$lig_xcol, ', xlab = \"', input$lig_xlab,\n                      '\", ylab = \"', input$lig_ylab, '\", type = \"', type_l, '\", main = \"', input$title, '\", legend = ', input$legend2,\n                      ', legendPosition = \"', ifelse(!is.null(input$legend_side2), input$legend_side2, 'right'), '\")')\n        \n      }\n    } else if(input$sidebar == \"piedon\") {\n      \n      if(is.null(input$input_data)) {\n        data(\"data_pie\")\n      } else {\n        data_pie <- read.table(input$input_data$path, sep = \";\", dec = \".\", header = TRUE)\n      }\n      \n      res_text <- paste0('colnames(data_pie)[which(colnames(data_pie) == \"', input$pie_lab, '\")] <- \"label\"', '\\n',\n                         'colnames(data_pie)[which(colnames(data_pie) == \"', input$pie_val, '\", )] <- \"value\"', '\\n')\n      \n      \n      if(input$piedon_type == 1) {\n        res_text <- paste0(res_text,\n                          'amPie(data = data_pie, show_values = ', input$pie_showval, ', depth = ', input$pie_depth, \n                          ', main = \"', input$title, '\", legend = ', input$legend3, \n                     ', legendPosition = \"', ifelse(!is.null(input$legend_side3), input$legend_side3, \"right\"), '\")')\n      } else {\n        res_text <- paste0(res_text,\n                           'amPie(data = data_pie, show_values = ', input$pie_showval, ', depth = ', input$pie_depth, \n                           ', inner_radius = ', input$pie_radius, \n                           ', main = \"', input$title, '\", legend = ', input$legend3, \n                           ', legendPosition = \"', ifelse(!is.null(input$legend_side3), input$legend_side3, \"right\"), '\")')\n      }\n    }\n    \n    \n    HTML(paste0(\"<pre><code>\", res_text, \"</code></pre>\"))\n  })\n  \n  \n})\n",
    "created" : 1467362881125.000,
    "dirty" : false,
    "encoding" : "LATIN1",
    "folds" : "",
    "hash" : "625896206",
    "id" : "647756B4",
    "lastKnownWriteTime" : 1474448133,
    "last_content_update" : 1474448133,
    "path" : "~/rAmCharts_app/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}