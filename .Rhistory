shiny::runApp()
?amPlot
runApp()
xc <- paste("cat.", 1:100)
xf <- factor(xc)
y <- rnorm(length(xc))
amPlot(x = xc, y = y, type = 'l')
amPlot(x = xf, y = y, type = 'l')
amPlot(x = xc, y = y, type = "sl")
amPlot(x = xc, y = y, type = "st")
amPlot(x = xc, y = y, type = "p")
amPlot(x = xc, y = y,type = "b")
data("iris")
head(iris)
amPlot(x = x, y = y, type = "l", lty = 2)
runApp()
runApp()
iris
head(iris)
x = "Sepal.Length"
amPlot(x, data = iris)
amPlot(iris$Sepal.Length)
runApp()
res <- amPlot(x = iris[,1], y = NULL, xlab =" input$lig_xlab",
ylab = "input$lig_ylab", type = "l",
horiz = FALSE, main = "input$title")
res <- amPlot(x = iris[,1], xlab =" input$lig_xlab",
ylab = "input$lig_ylab", type = "l",
horiz = FALSE, main = "input$title")
res <- amPlot(x = iris[,1], xlab =" input$lig_xlab",
ylab = "input$lig_ylab", type = "l",
main = "input$title")
res
yval <- iris$Sepal.Width
res <- amPlot(x = iris[,1], y = yval, xlab =" input$lig_xlab",
ylab = "input$lig_ylab", type = "l",
main = "input$title")
res
runApp()
runApp()
amPlot(iris)
library(pipeR)
amPlot(iris) %>% amLegend()
amPlot(iris) %>% setLegend(useGraphSettings = TRUE)
plot(jol = 3
)
plot(1:3,jol = 3)
parallel::detectCores()
shiny::runApp()
